package main

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"io/fs"
	"os"
	"reflect"
	"strings"

	"golang.org/x/tools/imports"

	"router/generator/template"
	"router/generator/visitor"
)

const modelRelationFileName = "model_relation_gen.go"
const routerFileName = "router_gen.go"
const daoFileName = "common_gen.go"

func defaultFileFilter(info fs.FileInfo) bool {
	if strings.HasSuffix(info.Name(), "_test.go") {
		return false
	}
	if strings.HasSuffix(info.Name(), "_mock.go") {
		return false
	}

	if info.Name() == modelRelationFileName ||
		info.Name() == routerFileName {
		return false
	}

	return true
}

func main() {
	basePath := "D:\\Workspace\\go-test\\cmd\\router"
	modelPath := basePath + "/model"
	routePath := basePath + "/route"

	fset := token.NewFileSet()

	callVisitor := visitor.NewCallVisitor()
	modelVisitor := visitor.NewModelVisitor()
	routeModelVisitor := visitor.NewModelVisitor()
	routeModelVisitor.WithSuffix("Req")

	parsedModelFiles, err := parser.ParseDir(fset, modelPath, defaultFileFilter, parser.ParseComments|parser.AllErrors)
	if err != nil {
		panic(err)
	}

	for _, f := range parsedModelFiles {
		ast.Walk(modelVisitor, f)
	}

	parsedRouteModelFiles, err := parser.ParseDir(fset, routePath, defaultFileFilter, parser.ParseComments|parser.AllErrors)
	if err != nil {
		panic(err)
	}

	for _, f := range parsedRouteModelFiles {
		ast.Walk(routeModelVisitor, f)
	}

	parsedCallFiles, err := parser.ParseDir(fset, routePath, defaultFileFilter, parser.ParseComments|parser.AllErrors)
	if err != nil {
		panic(err)
	}

	for _, f := range parsedCallFiles {
		ast.Walk(callVisitor, f)
	}

	modelPackageName := modelVisitor.PackageName()

	buf := bytes.NewBuffer([]byte{})
	buf.WriteString("package dao\n")
	buf.WriteString("\n")
	buf.WriteString(template.DaoCommon)
	_ = os.Mkdir(basePath+"/dao/", os.ModePerm)
	saveFile(basePath+"/dao/"+daoFileName, buf.Bytes())

	buf.Reset()
	buf.WriteString("package route\n")
	buf.WriteString("\n")
	buf.WriteString(template.RouterCommon)
	saveFile(routePath+"/"+routerFileName, buf.Bytes())

	buf.Reset()
	buf.WriteString("package route\n")
	buf.WriteString("\n")
	buf.WriteString(template.ModelCommon)

	for routeModelName, relation := range callVisitor.Relations() {
		routeModel := routeModelVisitor.Models()[routeModelName]
		if routeModel == nil {
			continue
		}

		selectedModelNames := make([]string, 0)
		selectedModels := make([]*ast.StructType, 0)
		for modelName := range relation {
			t, ok := modelVisitor.Models()[modelName]
			if !ok {
				continue
			}
			selectedModelNames = append(selectedModelNames, modelName)
			selectedModels = append(selectedModels, t)
		}
		if len(selectedModelNames) == 0 {
			continue
		}
		implementsCopy(buf,
			routeModelName,
			routeModel,
			modelPackageName,
			selectedModelNames,
			selectedModels)
	}

	saveFile(routePath+"/"+modelRelationFileName, buf.Bytes())
}

func saveFile(fileName string, content []byte) {
	formated, err := imports.Process("", content, &imports.Options{
		TabIndent: true,
	})
	if err != nil {
		fmt.Println(string(content))
		panic(err)
	}

	file, err := os.Create(fileName)
	if err != nil {
		panic(err)
	}
	_, _ = file.WriteString("// Code generated by gen_content_copy. DO NOT EDIT.\n\n")
	_, _ = file.Write(formated)
	_ = file.Close()
}

func implementsCopy(sb *bytes.Buffer, routeModelName string, routeModel *ast.StructType, modelPackageName string, modelNames []string, models []*ast.StructType) {
	fromFields := map[string]int{}

	for i, param := range routeModel.Fields.List {
		st := reflect.StructTag(param.Tag.Value[1 : len(param.Tag.Value)-1])
		jsonName := strings.Split(st.Get("json"), ",")[0]
		fromFields[jsonName] = i
	}

	conditions := &strings.Builder{}
	for i, model := range models {
		if model == nil {
			continue
		}
		conditions.WriteString(fmt.Sprintf("case *%s.%s:\n", modelPackageName, modelNames[i]))
		for _, param := range model.Fields.List {
			st := reflect.StructTag(param.Tag.Value[1 : len(param.Tag.Value)-1])
			jsonName := strings.Split(st.Get("json"), ",")[0]
			fromFieldsIndex, ok := fromFields[jsonName]
			if !ok {
				continue
			}
			conditions.WriteString(fmt.Sprintf("to.%s = m.%s\n", param.Names[0].Name, routeModel.Fields.List[fromFieldsIndex].Names[0].Name))
		}
	}

	sb.WriteString(fmt.Sprintf(`
func (m *%s) copy(o any) error {
	switch to := o.(type) {
%s
	default:
		return errUnsupported
	}
	return nil
}
`, routeModelName, conditions.String()))
}
